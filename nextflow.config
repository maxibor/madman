process.container = 'maxibor/madman:dev'

params {
    reads = ''
    phred = 33
    results = './results'
    paired_end = true
    minlen = 300
    help = false
    minread = 150
    mindamage = 0.2
    multiqc_config = "$baseDir/assets/multiqc_config.yml"
    assembly_tool = "megahit"
    complexity_filter_poly_g_min = 10
    adapter_list = "$baseDir/assets/adapter_list.txt"
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}


profiles {
    standard {
        executor {
            name = 'local'
        }
         process{
            withLabel : 'bigmem' {
                cpus = 32
                memory = '256G'
            }
            withLabel : 'intenso' {
                cpus = 8
                memory = '40G'
            }
            withLabel : 'expresso' {
                cpus = 4
                memory = '16G'
            }
            withLabel : 'ristretto' {
                cpus = 1
                memory = '8G'
            }
        }
    }
    test {
        executor {
            name = 'local'
        }
        params {
            reads = "$baseDir/test/data/*.{1,2}.fastq.gz"
            phred = 64
            results = './test_results'
            paired_end = true
            help = false
        }  
         process{
            cpus = 2
            memory = '4G'
        }
    }
    shh {
        executor {
            name = 'slurm'
            queueSize = 16
        }
        params {
            max_memory = 256.GB
            max_cpus = 32
            max_time = 720.h
        }
        process{
            errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'ignore' }
            maxRetries = 2
            maxErrors = '-1'

            withLabel : 'bigmem' {
                queue = 'medium'
                cpus = { check_max( 20, 'cpus' ) }
                memory = { check_max( 200.GB * task.attempt, 'memory' ) }
                time = { check_max( 12.h * task.attempt, 'time' ) }
            }
            withLabel : 'longo' {
                queue = 'medium'
                cpus = { check_max( 20, 'cpus' ) }
                memory = { check_max( 15.GB * task.attempt, 'memory' ) }
                time = { check_max( 12.h * task.attempt, 'time' ) }
            }
            withLabel : 'intenso' {
                queue = 'short'
                cpus = 6
                memory = { check_max( 12.GB * task.attempt, 'memory' ) }
                time = 2.h
            }
            withLabel : 'expresso' {
                queue = 'short'
                cpus = 4
                memory = 8.GB
                time = { check_max( 1.h * task.attempt, 'time' ) }
            }
            withLabel : 'ristretto' {
                queue = 'short'
                cpus = 1
                memory = 2.GB
                time = { check_max( 1.h * task.attempt, 'time' ) }
            }
        }
        singularity.cacheDir = "/projects1/singularity_scratch/cache/"
    }
    shh_test {
        executor {
            name = 'slurm'
            queueSize = 16
        }
        process{
            withLabel : 'bigmem' {
                queue = 'medium'
                cpus = 2
                memory = '10G'
                time = '1h'
            }
            withLabel : 'longo' {
                queue = 'short'
                cpus = 2
                memory = '10G'
                time = '1h'
            }
            withLabel : 'intenso' {
                queue = 'short'
                cpus = 2
                memory = '2G'
                time = '1h'
            }
            withLabel : 'expresso' {
                queue = 'short'
                cpus = 2
                memory = '2G'
                time = '20m'
            }
            withLabel : 'ristretto' {
                queue = 'short'
                cpus = 1
                memory = '4G'
                time = '1h'
            }
        }
        params {
            reads = "$baseDir/test/data/*.{1,2}.fastq.gz"
            phred = 64
            results = './test_results'
            paired_end = true
            help = false
        }
        singularity.cacheDir = "/projects1/singularity_scratch/cache/"
    }

    conda {
        process.conda = "$baseDir/environment.yml" 
    }
    maxime {
        conda.cacheDir = "/projects1/users/borry/15_miniconda3/envs"
    }
    docker {
        docker.enabled = true
        // Avoid this error:
        //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
        // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
        // once this is established and works well, nextflow might implement this behavior as new default.
        // docker.runOptions = '-u \$(id -u):\$(id -g)'
    }
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        singularity.runOptions = '-B /run/shm:/run/shm'
    }
}

timeline {
  enabled = true
  file = "${params.results}/execution_timeline.html"
  }
report {
  enabled = true
  file = "${params.results}/execution_report.html"
  }