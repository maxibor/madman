/*
 * -------------------------------------------------
 *  nf-core/madman Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

  // TODO nf-core: Check the defaults for all processes
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 7.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

  withLabel: 'process_mandatory' {
    errorStrategy = { task.exitStatus in [12,143,137,104,134,139] ? 'retry' : 'finish' }
  }
  withLabel: 'process_ignore' {
    errorStrategy = { task.exitStatus in [12,143,137,104,134,139] ? 'retry' : 'ignore' }
  }

  maxRetries = 1
  maxErrors = '-1'

  // Process-specific resource requirements
  // NOTE - Only one of the labels below are used in the fastqc process in the main script.
  //        If possible, it would be nice to keep the same label naming convention when
  //        adding in your processes.
  withLabel:'process_low' {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withLabel:'process_medium' {
    cpus = { check_max( 6 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withLabel:'process_high' {
    cpus = { check_max( 12 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h * task.attempt, 'time' ) }
  }
  withLabel:'process_very_bigmem' {
    cpus = { check_max( 32 * task.attempt, 'cpus' ) }
    memory = { check_max( 256.GB * task.attempt, 'memory' ) }
    time = { check_max( 24.h * task.attempt, 'time' ) }

  }
  withName:get_software_versions {
    cache = false
  }
  
}
